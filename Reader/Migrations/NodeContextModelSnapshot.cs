// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reader;

#nullable disable

namespace Reader.Migrations
{
    [DbContext(typeof(NodeContext))]
    partial class NodeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Reader.InputFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InputFiles");
                });

            modelBuilder.Entity("Reader.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueArrayJson")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("Reader.InputFile", b =>
                {
                    b.HasOne("Reader.Node", "RootNode")
                        .WithOne()
                        .HasForeignKey("Reader.InputFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootNode");
                });

            modelBuilder.Entity("Reader.Node", b =>
                {
                    b.HasOne("Reader.Node", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reader.Node", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
